#!/usr/bin/env ruby

$VERSION = '0.1.0'

# load ncurses
require 'ncurses'

# default config
$config = {
  'config_path'           => ENV['HOME'] << '.raggle/config.rb',

  # ui options
  'focus'                 => 'select', # ['none', 'select', 'auto']
  'no_desc_auto_focus'    => true,

  # date formats
  'item_date_format'      => '%c',
  'desc_date_format'      => '%c',

  # messages
  'msg_welcome'           => " Welcome to Raggle #{$VERSION}.",
  'msg_exit'              => "| Press ESC or Q to exit ",
  'msg_close'             => '[X] ',

  # menu bar color
  'menu_bar_cols'         => 24,

  # status bar color
  'status_bar_cols'       => 24,

  # color palette (referenced by window attributes)
  'color_palette'         => [
    [  1, Ncurses::COLOR_WHITE,    Ncurses::COLOR_BLACK   ],
    [  2, Ncurses::COLOR_RED,      Ncurses::COLOR_BLACK   ],
    [  3, Ncurses::COLOR_GREEN,    Ncurses::COLOR_BLACK   ],
    [  4, Ncurses::COLOR_BLUE,     Ncurses::COLOR_BLACK   ],
    [  5, Ncurses::COLOR_MAGENTA,  Ncurses::COLOR_BLACK   ],
    [  6, Ncurses::COLOR_CYAN,     Ncurses::COLOR_BLACK   ],
    [  7, Ncurses::COLOR_YELLOW,   Ncurses::COLOR_BLACK   ],
    [ 11, Ncurses::COLOR_BLACK,    Ncurses::COLOR_WHITE   ],
    [ 12, Ncurses::COLOR_BLACK,    Ncurses::COLOR_RED     ],
    [ 13, Ncurses::COLOR_BLACK,    Ncurses::COLOR_GREEN   ],
    [ 14, Ncurses::COLOR_BLACK,    Ncurses::COLOR_BLUE    ],
    [ 15, Ncurses::COLOR_BLACK,    Ncurses::COLOR_MAGENTA ],
    [ 16, Ncurses::COLOR_BLACK,    Ncurses::COLOR_CYAN    ],
    [ 17, Ncurses::COLOR_BLACK,    Ncurses::COLOR_YELLOW  ],
    [ 21, Ncurses::COLOR_BLACK,    Ncurses::COLOR_WHITE   ],
    [ 22, Ncurses::COLOR_WHITE,    Ncurses::COLOR_RED     ],
    [ 23, Ncurses::COLOR_WHITE,    Ncurses::COLOR_GREEN   ],
    [ 24, Ncurses::COLOR_WHITE,    Ncurses::COLOR_BLUE    ],
    [ 25, Ncurses::COLOR_WHITE,    Ncurses::COLOR_MAGENTA ],
    [ 26, Ncurses::COLOR_WHITE,    Ncurses::COLOR_CYAN    ],
    [ 27, Ncurses::COLOR_WHITE,    Ncurses::COLOR_YELLOW  ],
  ],

  # feed window attributes
  'win_feed'      => {
    'key'         => 'feed',
    'title'       => 'Feeds',
    'coords'      => [0, 0, 20, -1],
    'type'        => 'list',
    'colors'      => { 
      'title'     => 1,
      'text'      => 1,
      'h_text'    => 16,
      'box'       => 2,
      'a_title'   => 21,
      'a_box'     => 2,
    },
  },

  # item window attributes
  'win_item'      => {
    'key'         => 'item',
    'title'       => 'Items',
    'coords'      => [20, 0, -1, 20],
    'type'        => 'list',
    'colors'      => {
      'title'     => 1,
      'text'      => 1,
      'h_text'    => 16,
      'box'       => 4,
      'a_title'   => 21,
      'a_box'     => 4,
    },
  },

  # desc window attributes
  'win_desc'      => {
    'key'         => 'desc',
    'title'       => 'Description',
    'coords'      => [20, 20, -1, -1],
    'type'        => 'text',
    'colors'      => {
      'title'     => 1,
      'text'      => 1,
      'h_text'    => 16,
      'box'       => 6,
      'a_title'   => 21,
      'a_box'     => 6,
      'url'       => 6,
      'date'      => 6,
    },
  },

  # debugging options (don't touch)
  'use_raw_mode'  => true,
  'use_noecho'    => true,

  'debug_feeds'   => [
    { 'title'     => 'Raggle',
      'url'       => 'http://www.pablotron.org/software/raggle/help.rss',
      'refresh'   => -1,
      'items'     => [
        { 'title' => 'Introduction',
          'url'   => 'http://www.pablotron.org/software/raggle/',
          'date'  => 1055074823,
          'desc'  => 'Welcome to Raggle!
. .
Raggle is a command-line RSS aggregator, written in Ruby
(http://www.ruby-lang.org/).  Raggle is free software; please see the
file COPYING or the License item in this feed for licensing and
warranty information.', },
        { 'title' => 'License',
          'url'   => 'http://www.pablotron.org/software/raggle/',
          'date'  => 1055074823,
          'desc'  => 'Copyright (C) 2003
Paul Duncan, and various contributors.
. . 
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
. .
The above copyright notice and this permission notice shall be included in
all copies of the Software, its documentation and marketing & publicity 
materials, and acknowledgment shall be given in the documentation, materials
and software packages that this Software was used.
. .   
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
          ', },
        { 'title' => 'Usage',
          'url'   => 'http://www.pablotron.org/software/raggle/',
          'date'  => 1055074823,
          'desc'  => 'more fun with testing', },
      ],
    },
    { 'title'     => 'Slashdot',
      'url'       => 'http://slashdot.org/slashdot.rss',
      'refresh'   => 30,
      'items'     => [
        { 'title' => 'test item 1',
          'url'   => 'http://www.pablotron.org/test?item=1',
          'date'  => 89743298,
          'desc'  => 'this is a test item', },
        { 'title' => 'test item 2',
          'url'   => 'http://www.pablotron.org/test?item=2',
          'date'  => 3243298,
          'desc'  => 'this is another test item', },
        { 'title' => 'test item 3',
          'url'   => 'http://www.pablotron.org/test?item=3',
          'date'  => 112239847,
          'desc'  => 'more fun with testing', },
      ],
    },
    { 'title'     => 'Alternet',
      'url'       => 'http://www.alternet.org/alternet.rss',
      'refresh'   => 30,
      'items'     => [
        { 'title' => 'asdfkjsaldkjfs1',
          'url'   => 'http://www.pablotron.org/test?item=1',
          'date'  => 32743298,
          'desc'  => 'asdfklasjdfldsa', },
        { 'title' => 'blarhg blargh blarh2',
          'url'   => 'http://www.pablotron.org/test?item=1',
          'date'  => 32897498,
          'desc'  => 'asdfklasjdfldsa', },
        { 'title' => 'cripes 3',
          'url'   => 'http://www.pablotron.org/test?item=1',
          'date'  => 32893298,
          'desc'  => 'asdfklasjdfldsa', },
        { 'title' => 'diddly doo 4',
          'url'   => 'http://www.pablotron.org/test?item=1',
          'date'  => 32893298,
          'desc'  => 'this is a test item', },
        { 'title' => 'Text Reflow Sample',
          'url'   => 'http://www.pablotron.org/test?item=2',
          'date'  => 3243298,
          'desc'  => 'Some sample text:
.
The Saturn Game, by Poul Anderson
.
One of the writing problems peculiar to science fiction is that science has a
wa y of catching up with your imagining. Just as you finish writing a book
about th e poor folks who live on the perpetually dark side of Mercury, the
damned Marine r flyby shows that there\'s no such thing as a dark side. Out the
window with the manuscript (maybe followed by the typewriter and even the
writer).
', },
        { 'title' => 'bleh de bleh bleh6',
          'url'   => 'http://www.pablotron.org/test?item=3',
          'date'  => 112239847,
          'desc'  => 'more fun with testing', },
      ],
    },
  ],
}

# parse command-line options
# TODO

# load user config ($HOME/.raggle/config.rb)
load $config['config_path'], false if test ?e, $config['config_path']

class Window
  attr_accessor :win, :win_type, :title, :key, :colors, :active, :items, :active_item

  #
  # window constructor
  #
  def initialize(opts)
    coords = opts['coords']
    coords[2] = $config['w'] - coords[0] if coords[2] == -1
    coords[3] = $config['h'] - coords[1] if coords[3] == -1

    @active_item = 0
    @items = []

    @title = opts['title']
    @win_type = opts['type']
    @key = opts['key']
    @colors = opts['colors'].dup

    @win = Ncurses::newwin coords[3], coords[2], coords[1], coords[0]
    refresh
  end

  #
  # refresh window title and border (but not the contents)
  # 
  def refresh(refresh_contents = false)
    win.color_set @colors[@active ? 'a_box' : 'box'], nil
    Ncurses::box win, 0, 0
    win.color_set @colors[@active ? 'a_title' : 'title'], nil
    Ncurses::mvwprintw win, 0, 1, " #{@title} "
    win.color_set @colors['text'], nil
    Ncurses::wrefresh win
  end

  def clear
    @win.color_set @colors['text'], nil
    @win.clear
  end

  #
  # draw text in window
  #
  def draw(orig_text, x = 1, y = 1, hilited = false, refresh_win = true)
    ha = []; wa = []
    Ncurses::getmaxyx win, ha, wa
    w, h = wa[0], ha[0]

    # reflow text if it's a text window
    # DOES THIS BELOGN HERE?
    if @win_type == 'text'
      text = ''
      curr_line = ''
      orig_text.split(/\s+/).each { |word|
        if word == '.'
          text << curr_line << "\n" 
          curr_line = ''
        elsif curr_line.length + word.length > w - 2
          text << curr_line << "\n"
          curr_line = "#{word} "
        else
          curr_line += "#{word} "
        end
      }
      text << curr_line << "\n"
    else
      text = orig_text
    end

    # draw text in window
    @win.color_set @colors['h_text'], nil if hilited
    text.each_line { |line|
      Ncurses::mvwprintw @win, y, x, line.slice(0, w - x - 1)
      y += 1
    }
    @win.color_set @colors['text'], nil

    refresh if refresh_win
  end

  #
  # handle keyboard input
  #
  def handle_key(key)
    case key
    when Ncurses::KEY_UP
      if @items.size > 0
        ai = @active_item
        @active_item = ((ai - 1 < 0) ? @items.size : ai) - 1
        draw_items
        select_win_item if $config['focus'] == 'auto'
      end
    when Ncurses::KEY_DOWN
      if @items.size > 0
        @active_item = (@active_item + 1) % @items.size
        draw_items
        select_win_item if $config['focus'] == 'auto'
      end
    when ?\n
      select_win_item
    when ?\ 
      select_win_item
    end
  end

  #
  # select currently hilited window item
  #
  def select_win_item
    if @items[@active_item].has_key? 'feed'
      select_feed @items[@active_item]['feed']
    elsif @items[@active_item].has_key? 'item'
      select_item @items[@active_item]['item']
    elsif @items[@active_item].has_key? 'url'
      # exec ['Eterm', '-e', 'links', @items[@active_item]['url']] if fork == 0
    end
  end

  #
  # redraw window items
  #
  def draw_items
    y = 0
    if @win_type == 'text'
      @items.each { |item|
        y += 1
        draw("Link: ", 1, y, false)
        @win.color_set @colors['url'], nil
        draw(item['url'], 7, y, false)

        y += 1
        d_str = Time.at(item['date'].to_i).strftime($config['desc_date_format'])
        draw("Date: ", 1, y, false)
        @win.color_set @colors['date'], nil
        draw(d_str, 7, y, false)
        draw(item['title'], 1, y += 2, false)
      }
    else
      @items.each { |i| draw(i['title'], 1, y += 1, y - 1 == @active_item) }
    end
    refresh(true)
  end
end

#
# set status bar message
#
def set_status(str)
  str += ' ' * ($config['w'] / 2 - str.length)
  e_msg = $config['msg_exit']
  e_msg = ' ' * ($config['w'] / 2 - e_msg.length) + e_msg
  msg = str << e_msg

  Ncurses::wcolor_set Ncurses::stdscr, $config['status_bar_cols'], nil
  Ncurses::mvprintw $config['h'], 0, msg
  Ncurses::refresh
end

# 
# set active window 
#
def set_active_win(a_win)
  $wins[$a_win].active = false
  $wins[$a_win].refresh
  $a_win = a_win
  $wins[$a_win].active = true
  $wins[$a_win].refresh
end

#
# get window id by key
#
def get_win_id(str)
  $wins.each_index { |i| return i if $wins[i].key == str }
  -1
end

#
# set active feed by id
#
def select_feed(id)
  $a_feed = id
  $a_item = 0

  item_id = get_win_id 'item'
  $wins[item_id].active_item = 0
  $wins[item_id].items.clear

  fmt = $config['item_date_format']
  $config['debug_feeds'][id]['items'].each_with_index { |item, i|
    title = item['title'] + ' (' +
            Time.at(item['date'].to_i).strftime(fmt) << ')'
    $wins[item_id].items << {
      'title' => title,
      'item'  => i,
    }
  }

  $wins[item_id].win.clear
  $wins[item_id].draw_items

  set_active_win(item_id) if $config['focus'] == 'select'
end

#
# set active item by id
#
def select_item(id)
  $a_item = id

  desc_id = get_win_id 'desc'
  $wins[desc_id].active_item = 0
  $wins[desc_id].items.clear

  $wins[desc_id].items << {
    'title' => $config['debug_feeds'][$a_feed]['items'][id]['desc'],
    'url'   => $config['debug_feeds'][$a_feed]['items'][id]['url'],
    'date'  => $config['debug_feeds'][$a_feed]['items'][id]['date'],
  }
  $wins[desc_id].win.clear
  $wins[desc_id].draw_items

  set_active_win(desc_id) if $config['focus'] == 'select' and
                             !$config['no_desc_auto_focus']
end

begin
  # initialize screen & keyboard
  Ncurses::initscr
  Ncurses::raw if $config['use_raw_mode']
  Ncurses::keypad Ncurses::stdscr, 1
  Ncurses::noecho if $config['use_noecho']
  Ncurses::start_color

  # exit -1 unless Ncurses::has_colors?

  # initialize color pairs
  $config['color_palette'].each { |ary| Ncurses::init_pair *ary }

  # get screen coordinates
  h = []; w = []
  Ncurses::getmaxyx Ncurses::stdscr, h, w
  $config['w'] = w[0]
  $config['h'] = h[0] - 1

  # draw menu bar
  # c_msg = $config['msg_close']
  # msg = (' ' * ($config['w'] - c_msg.length)) << c_msg
  # Ncurses::wcolor_set Ncurses::stdscr, $config['menu_bar_cols'], nil
  # Ncurses::mvprintw 0, 0, msg
  # Ncurses::refresh

  # draw status bar
  set_status $config['msg_welcome']
  
  # create windows
  $a_win = 0
  $wins = []
  ['feed', 'item', 'desc'].each { |i|
    $wins << Window.new($config["win_#{i}"])
    # $wins[-1].draw LONG_STRING
  }
  set_active_win(0)
  
  $a_feed, $a_item = 0, 0
  
  # populate feed window with debug values
  id = get_win_id 'feed'
  $config['debug_feeds'].each_with_index { |feed, i|
    title = feed['title'] + ' (%d)' % feed['items'].size
    $wins[id].items << {
      'title' => title,
      'feed'  => i,
    }
  }
  $wins[id].draw_items
  
  select_feed(0)
  set_active_win(0)
  
  # main input loop
  done = false
  while !done
    # handle keyboard input
    case c = Ncurses::getch
    when Ncurses::KEY_RIGHT
      set_active_win(($a_win + 1) % $wins.size)
    when ?\t
      set_active_win(($a_win + 1) % $wins.size)
    when Ncurses::KEY_LEFT
      set_active_win((($a_win - 1 < 0) ? $wins.size : $a_win) - 1)
    when ?\\
      set_active_win((($a_win - 1 < 0) ? $wins.size : $a_win) - 1)
    when Ncurses::KEY_F12
      done = true
    when ?q
      done = true
    when ?\e
      done = true
    when ?
      resize_wins
    else  
      $wins[$a_win].handle_key c
    end
  end
ensure
  # make sure the screen gets cleaned up on exit
  Ncurses::endwin
end
